NOTE: #comment#
This file describes the grammar of the language.

statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr

expr        : KEYWORD:VAR IDENTIFIER EQ expr
            : KEYWORD:DEFINE IDENTIFIER EQ expr
            : KEYWORD:DELETE call
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*
            
comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE|ELSE_ASSIGN)* arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*
            : term (INC|DEC)*

term        : factor ((MUL|DIV|POWER|MODULO) factor)*

factor      : (PLUS|MINUS) factor
            : (INC|DEC)* term
            : call

call_func   : (LPAREN (expr (COMMA expr)*)? RPAREN)*

call_list   : (LSQUARE (expr)|(expr SEMICOLON expr) RSQUARE)* (= expr)? #almost the same for dictionnaries#

call        : atom (call|call_list)*

atom        : NUMBER|STRING|IDENTIFIER(#if variable# (PLUS|MINUS|MUL|DIV|POWER|MODULO)EQUALS expr)?
            : LPAREN expr RPAREN
            : list-expr
            : dict-expr
            : if-expr
            : for-expr
            : foreach-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

dict-expr   : LBRACK ((expr SEMICOLON expr)|(IDENTIFIER) (COMMA (expr SEMICOLON expr)|(IDENTIFIER))*)? RBRACK

if-expr     : KEYWORD:IF expr KEYWORD:THEN
                (statement if-expr-elif|if-expr-else?)
                | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else)

if-expr-elif: KEYWORD:ELIF expr KEYWORD:THEN
                (statement if-expr-elif|if-expr-else?)
                | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else)

if-expr-else: KEYWORD:ELSE
                statement
                | (NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                (KEYWORD:STEP expr)? KEYWORD:THEN
                statement
                | (NEWLINE statements KEYWORD:END)

foreach-expr: KEYWORD:FOREACH call_list KEYWORD:AS (IDENTIFIER DOUBLE_ARROW IDENTIFIER)|(IDENTIFIER) SEMICOLON
                (statement) | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN
                statement
                | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUNC IDENTIFIER?
                LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                (ARROW expr)
                | (SEMICOLON statements KEYWORD:END)

